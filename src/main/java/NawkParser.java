/* Generated By:JavaCC: Do not edit this line. NawkParser.java */
import ast.SymbolTable; import ast.Node; import ast.Variable; import java.io.File;import java.io.FileReader;

public class NawkParser implements NawkParserConstants {
    public static void main(String[] args) {
        try {
          if (args.length == 0) {
            NawkParser parser = new NawkParser(NawkParser.class.getResourceAsStream("myawk.nawk"));
            parser.start();
          } else {
            for (String arg: args) {
              File testFile =
                      new File(arg);
              NawkParser parser = new NawkParser(new FileReader(testFile));
              parser.start();
            }
          }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

/* PARSER RULES */

// Root-Regel
  final public void start() throws ParseException {
    prog();
    jj_consume_token(0);
  }

  final public void prog() throws ParseException {
    SymbolTable globalSt = new SymbolTable(null);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
      case VOID:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(3)) {
        statement(globalSt);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
        case INTEGER:
        case STRING:
        case BOOLEAN:
        case CHAR:
        case VOID:
          functionDeclaration();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** STATEMENTS **/
  final public void statement(SymbolTable st) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
    case INTEGER:
    case STRING:
    case BOOLEAN:
    case CHAR:
      variableDeclaration(st);
      break;
    case LBRACE:
      blockStatement(st);
      break;
    case PLUS:
    case MINUS:
    case BANG:
    case LPAREN:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case CHAR_LTIERAL:
    case STRING_LITERAL:
    case Ident:
      exprStatement(st);
      break;
    case SEMICOLON:
      emptyStatement();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void blockStatement(SymbolTable parentSt) throws ParseException {
        SymbolTable st = new SymbolTable(parentSt);
    jj_consume_token(LBRACE);
    blockStatementContent(st);
    jj_consume_token(RBRACE);
  }

// Workaround, da (..)* in blockStatement nicht stehen kann, ohne dass
// javecc unreachable code erzeugt
  final public void blockStatementContent(SymbolTable st) throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      statement(st);
    }
  }

  final public void exprStatement(SymbolTable st) throws ParseException {
    expr(st);
    jj_consume_token(SEMICOLON);
  }

  final public void emptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

/** FIELD DECLARATION **/
  final public Token type() throws ParseException {
    Token type;
    type = primitiveType();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
                                         {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Token primitiveType() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void variableDeclaration(SymbolTable st) throws ParseException {
    Token type;
    Variable variable;
    type = type();
    variable = variableDeclarator(st);
                                                   st.add(variable.identifier, type.image);
    jj_consume_token(SEMICOLON);
  }

  final public Variable variableDeclarator(SymbolTable st) throws ParseException {
    Token id;
    id = variableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variableInitializer(st);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                                               {if (true) return new Variable(id.image, "");}
    throw new Error("Missing return statement in function");
  }

  final public Token variableDeclaratorId() throws ParseException {
    Token id;
    id = jj_consume_token(Ident);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
                             {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public void variableInitializer(SymbolTable st) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      arrayInitializer(st);
      break;
    case PLUS:
    case MINUS:
    case BANG:
    case LPAREN:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case CHAR_LTIERAL:
    case STRING_LITERAL:
    case Ident:
      expr(st);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arrayInitializer(SymbolTable st) throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BANG:
    case LPAREN:
    case LBRACE:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case CHAR_LTIERAL:
    case STRING_LITERAL:
    case Ident:
      variableInitializer(st);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        variableInitializer(st);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

/** FUNCTION DECLARATION **/
  final public void functionDeclaration() throws ParseException {
    // No Parent table, because a function can not access outer scope
    SymbolTable st = new SymbolTable(null);
    resultType();
    jj_consume_token(Ident);
    jj_consume_token(LPAREN);
    functionParameters(st);
    jj_consume_token(RPAREN);
    functionBlock(st);
  }

  final public void resultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case DOUBLE:
    case INTEGER:
    case STRING:
    case BOOLEAN:
    case CHAR:
      type();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void functionParameters(SymbolTable st) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE:
    case INTEGER:
    case STRING:
    case BOOLEAN:
    case CHAR:
      type();
      variableDeclarator(st);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        type();
        variableDeclarator(st);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void functionBlock(SymbolTable st) throws ParseException {
    jj_consume_token(LBRACE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      statement(st);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      expr(st);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

/** EXPRESSIONS **/
  final public String expr(SymbolTable st) throws ParseException {
    String left, right = null;
    Token op = null;
    // define variable assignment in expression rule, since expr can evaluate to an identifier
        left = conditionalOrExpression(st);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      right = expr(st);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String conditionalOrExpression(SymbolTable st) throws ParseException {
     String left, right = null;
     Token op = null;
    left = conditionalAndExpression(st);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      right = conditionalAndExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String conditionalAndExpression(SymbolTable st) throws ParseException {
     String left, right = null;
     Token op = null;
    left = equalityExpression(st);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      right = equalityExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String equalityExpression(SymbolTable st) throws ParseException {
     String left, right = null;
     Token op = null;
    left = relationalExpression(st);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = relationalExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String relationalExpression(SymbolTable st) throws ParseException {
     String left, right = null;
     Token op = null;
    left = additiveExpression(st);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = additiveExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String additiveExpression(SymbolTable st) throws ParseException {
     String left, right = null;
     Token op = null;
    left = multiplicativeExpression(st);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = multiplicativeExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

/**
* Rules in multiplication:
 OK:       Arithmetic with numeric values (int, double, char)

* Not OK:   Arithmetic with non-numeric values (string, boolean)
* @returns Type of the expression
*/
  final public String multiplicativeExpression(SymbolTable st) throws ParseException {
    String left, right = null;
    Token op = null;
    left = unaryExpression(st);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MOD:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        op = jj_consume_token(STAR);
        break;
      case SLASH:
        op = jj_consume_token(SLASH);
        break;
      case MOD:
        op = jj_consume_token(MOD);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = unaryExpression(st);
    }
        {if (true) return validateTypes(left, right, op);}
    throw new Error("Missing return statement in function");
  }

  final public String unaryExpression(SymbolTable st) throws ParseException {
    Token t;
    String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BANG:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case BANG:
        t = jj_consume_token(BANG);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    type = primaryExpression(st);
                                                                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public String primaryExpression(SymbolTable st) throws ParseException {
    String type;
    type = literal(st);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
    case DOT:
      primarySuffix(st);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                            {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public void primarySuffix(SymbolTable st) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(Ident);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      arguments(st);
      break;
    case LBRACKET:
      label_14:
      while (true) {
        jj_consume_token(LBRACKET);
        expr(st);
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_14;
        }
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arguments(SymbolTable st) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BANG:
    case LPAREN:
    case LBRACE:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case CHAR_LTIERAL:
    case STRING_LITERAL:
    case Ident:
      argumentList(st);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void argumentList(SymbolTable st) throws ParseException {
    variableInitializer(st);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      variableInitializer(st);
    }
  }

  final public String literal(SymbolTable st) throws ParseException {
    Token id;
    // User intended type for the variable
    String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                          type = "int";
      break;
    case DOUBLE_LITERAL:
      jj_consume_token(DOUBLE_LITERAL);
                          type = "double";
      break;
    case CHAR_LTIERAL:
      jj_consume_token(CHAR_LTIERAL);
                          type = "char";
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          type = "string";
      break;
    case TRUE:
    case FALSE:
      booleanLiteral();
                          type = "boolean";
      break;
    case Ident:
      id = jj_consume_token(Ident);
        if (st.find(id.image) == null)  {
            System.out.printf("Variable '%s' is not defined yet.%n", id.image);
            type = "error";
        } else {
            type = st.find(id.image);
        }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      type = expr(st);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public void booleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  Node skipError(int kind) throws ParseException {
    ParseException e = generateParseException();
    System.out.println("Hello " + e.toString());
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);
    return null;
  }

  boolean isNumeric(String type) throws ParseException {
    return type.equals("int") || type.equals("char") || type.equals("double");
  }

  String determineTypeBase(String t1, String t2) throws ParseException {
    //   OP   # char   # int #  double
    //  # # # # # # # # # # # # # # #
    // char   # int      int    double
    // int    # int      int    double
    // double ä double  double  double
    if (t1.equals("double") || t2.equals("double")) return "double";

    return "int";
  }

  String validateTypes(String left, String right, Token op) throws ParseException {
    if (right == null || op == null) // no point in type checking if no right expression exists
        return left;

    if (left.equals("error") || right.equals("error")) {
        System.out.printf("Invalid Type detected. Check types '%s' and '%s'.%n", left, right);
        return "error";
    }
    if (isNumeric(left) && isNumeric(right)) { // ok
        return determineTypeBase(left, right);
    } else { // numerics with non-numerics or string/boolean with string/boolean
        System.out.printf("Bad operator '%s' between types '%s' and '%s'.%n", op.image, left, right);
        return "error";
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(Ident)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(Ident)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(CHAR_LTIERAL)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    if (jj_3R_64()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(Ident)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    if (jj_3R_41()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public NawkParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfe8a0106,0x7e000000,0xbe8a0106,0xbe8a0106,0x200000,0x3e000000,0x80,0x200000,0x800a0106,0x1000000,0x800a0106,0x7e000000,0x1000000,0x3e000000,0xbe8a0106,0x0,0x80,0x8000,0x10000,0x4800,0x4800,0x3600,0x3600,0x6,0x6,0x38,0x38,0x106,0x106,0x220000,0x0,0x200000,0x220000,0x800a0106,0x1000000,0x80020000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f1,0x0,0x1f1,0x1f1,0x0,0x0,0x0,0x0,0x1f1,0x0,0x1f1,0x0,0x0,0x0,0x1f1,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x1f1,0x0,0x1f1,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NawkParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NawkParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NawkParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NawkParser(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/* Generated By:JavaCC: Do not edit this line. NawkParser.java */
import java.io.File;import java.io.FileReader;

public class NawkParser implements NawkParserConstants {
    public static void main(String[] args) {
        try {
          if (args.length == 0) {
            NawkParser parser = new NawkParser(NawkParser.class.getResourceAsStream("myawk.nawk"));
            parser.start();
          } else {
            for (String arg: args) {
              File testFile =
                      new File(arg);
              NawkParser parser = new NawkParser(new FileReader(testFile));
              parser.start();
            }
          }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

/* PARSER RULES */

// Root-Regel
  final public void start() throws ParseException {
    trace_call("start");
    try {
      prog();
      jj_consume_token(0);
    } finally {
      trace_return("start");
    }
  }

  final public void prog() throws ParseException {
    trace_call("prog");
    try {
    SymbolTable globalSt = new SymbolTable(null);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case BANG:
        case LBRACE:
        case SEMICOLON:
        case 25:
        case 26:
        case 28:
        case 29:
        case 30:
        case VOID:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(3)) {
          statement(globalSt);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 25:
          case 26:
          case 28:
          case 29:
          case 30:
          case VOID:
            functionDeclaration();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("prog");
    }
  }

/** STATEMENTS **/
  final public void statement(SymbolTable st) throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 26:
      case 28:
      case 29:
      case 30:
        fieldDeclaration(st);
        break;
      case LBRACE:
        blockStatement(st);
        break;
      case PLUS:
      case MINUS:
      case BANG:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        exprStatement(st);
        break;
      case SEMICOLON:
        emptyStatement();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void blockStatement(SymbolTable parentSt) throws ParseException {
    trace_call("blockStatement");
    try {
        SymbolTable st = new SymbolTable(parentSt);
      jj_consume_token(LBRACE);
      blockStatementContent(st);
      jj_consume_token(RBRACE);
    } finally {
      trace_return("blockStatement");
    }
  }

// Workaround, da (..)* in blockStatement nicht stehen kann, ohne dass
// javecc unreachable code erzeugt
  final public void blockStatementContent(SymbolTable st) throws ParseException {
    trace_call("blockStatementContent");
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case BANG:
        case LBRACE:
        case SEMICOLON:
        case 25:
        case 26:
        case 28:
        case 29:
        case 30:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        statement(st);
      }
    } finally {
      trace_return("blockStatementContent");
    }
  }

  final public void exprStatement(SymbolTable st) throws ParseException {
    trace_call("exprStatement");
    try {
      expr();
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("exprStatement");
    }
  }

  final public void emptyStatement() throws ParseException {
    trace_call("emptyStatement");
    try {
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("emptyStatement");
    }
  }

/** FIELD DECLARATION **/
  final public void type() throws ParseException {
    trace_call("type");
    try {
      primitiveType();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("type");
    }
  }

  final public void primitiveType() throws ParseException {
    trace_call("primitiveType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        break;
      case 30:
        jj_consume_token(30);
        break;
      case 26:
        jj_consume_token(26);
        break;
      case 25:
        jj_consume_token(25);
        break;
      case 28:
        jj_consume_token(28);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("primitiveType");
    }
  }

  final public void fieldDeclaration(SymbolTable st) throws ParseException {
    trace_call("fieldDeclaration");
    try {
      type();
      variableDeclarator();
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("fieldDeclaration");
    }
  }

  final public void variableDeclarator() throws ParseException {
    trace_call("variableDeclarator");
    try {
      variableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        variableInitializer();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } finally {
      trace_return("variableDeclarator");
    }
  }

  final public void variableDeclaratorId() throws ParseException {
    trace_call("variableDeclaratorId");
    try {
      jj_consume_token(Ident);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("variableDeclaratorId");
    }
  }

  final public void variableInitializer() throws ParseException {
    trace_call("variableInitializer");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        arrayInitializer();
        break;
      case PLUS:
      case MINUS:
      case BANG:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        expr();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("variableInitializer");
    }
  }

  final public void arrayInitializer() throws ParseException {
    trace_call("arrayInitializer");
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
      case LBRACE:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        variableInitializer();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          variableInitializer();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("arrayInitializer");
    }
  }

/** FUNCTION DECLARATION **/
  final public void functionDeclaration() throws ParseException {
    trace_call("functionDeclaration");
    try {
    // No Parent table, because a function can not access outer scope
    SymbolTable st = new SymbolTable(null);
      resultType();
      jj_consume_token(Ident);
      jj_consume_token(LPAREN);
      functionParameters();
      jj_consume_token(RPAREN);
      functionBlock(st);
    } finally {
      trace_return("functionDeclaration");
    }
  }

  final public void resultType() throws ParseException {
    trace_call("resultType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case 25:
      case 26:
      case 28:
      case 29:
      case 30:
        type();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("resultType");
    }
  }

  final public void functionParameters() throws ParseException {
    trace_call("functionParameters");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 26:
      case 28:
      case 29:
      case 30:
        type();
        variableDeclarator();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          type();
          variableDeclarator();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } finally {
      trace_return("functionParameters");
    }
  }

  final public void functionBlock(SymbolTable st) throws ParseException {
    trace_call("functionBlock");
    try {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case BANG:
        case LBRACE:
        case SEMICOLON:
        case 25:
        case 26:
        case 28:
        case 29:
        case 30:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        statement(st);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        expr();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("functionBlock");
    }
  }

/** EXPRESSIONS **/
  final public void expr() throws ParseException {
    trace_call("expr");
    try {
      conditionalOrExpression();
    } finally {
      trace_return("expr");
    }
  }

  final public void conditionalOrExpression() throws ParseException {
    trace_call("conditionalOrExpression");
    try {
      conditionalAndExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        jj_consume_token(OR);
        conditionalAndExpression();
      }
    } finally {
      trace_return("conditionalOrExpression");
    }
  }

  final public void conditionalAndExpression() throws ParseException {
    trace_call("conditionalAndExpression");
    try {
      equalityExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(AND);
        equalityExpression();
      }
    } finally {
      trace_return("conditionalAndExpression");
    }
  }

  final public void equalityExpression() throws ParseException {
    trace_call("equalityExpression");
    try {
      relationalExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relationalExpression();
      }
    } finally {
      trace_return("equalityExpression");
    }
  }

  final public void relationalExpression() throws ParseException {
    trace_call("relationalExpression");
    try {
      additiveExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case LE:
        case GE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        additiveExpression();
      }
    } finally {
      trace_return("relationalExpression");
    }
  }

  final public void additiveExpression() throws ParseException {
    trace_call("additiveExpression");
    try {
      multiplicativeExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
      }
    } finally {
      trace_return("additiveExpression");
    }
  }

  final public void multiplicativeExpression() throws ParseException {
    trace_call("multiplicativeExpression");
    try {
      unaryExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case MOD:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryExpression();
      }
    } finally {
      trace_return("multiplicativeExpression");
    }
  }

  final public void unaryExpression() throws ParseException {
    trace_call("unaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      primaryExpression();
    } finally {
      trace_return("unaryExpression");
    }
  }

  final public void primaryExpression() throws ParseException {
    trace_call("primaryExpression");
    try {
      literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case DOT:
        primarySuffix();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } finally {
      trace_return("primaryExpression");
    }
  }

  final public void primarySuffix() throws ParseException {
    trace_call("primarySuffix");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(Ident);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      arguments();
    } finally {
      trace_return("primarySuffix");
    }
  }

  final public void arguments() throws ParseException {
    trace_call("arguments");
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case BANG:
      case LBRACE:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        argumentList();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("arguments");
    }
  }

  final public void argumentList() throws ParseException {
    trace_call("argumentList");
    try {
      variableInitializer();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        variableInitializer();
      }
    } finally {
      trace_return("argumentList");
    }
  }

  final public void literal() throws ParseException {
    trace_call("literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case DOUBLE_LITERAL:
        jj_consume_token(DOUBLE_LITERAL);
        break;
      case CHAR_LTIERAL:
        jj_consume_token(CHAR_LTIERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case TRUE:
      case FALSE:
        booleanLiteral();
        break;
      case Ident:
        jj_consume_token(Ident);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("literal");
    }
  }

  final public void booleanLiteral() throws ParseException {
    trace_call("booleanLiteral");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("booleanLiteral");
    }
  }

  Node skipError(int kind) throws ParseException {
    trace_call("skipError");
    try {
    ParseException e = generateParseException();
    System.out.println("Hello " + e.toString());
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);
    return null;
    } finally {
      trace_return("skipError");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (!jj_rescan) trace_call("booleanLiteral(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) { if (!jj_rescan) trace_return("booleanLiteral(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("booleanLiteral(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_49() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (!jj_rescan) trace_call("arrayInitializer(LOOKING AHEAD...)");
    if (jj_scan_token(LBRACE)) { if (!jj_rescan) trace_return("arrayInitializer(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("arrayInitializer(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (!jj_rescan) trace_call("literal(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) { if (!jj_rescan) trace_return("literal(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("literal(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (!jj_rescan) trace_call("variableInitializer(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) { if (!jj_rescan) trace_return("variableInitializer(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("variableInitializer(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_55() {
    if (!jj_rescan) trace_call("argumentList(LOOKING AHEAD...)");
    if (jj_3R_56()) { if (!jj_rescan) trace_return("argumentList(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("argumentList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (!jj_rescan) trace_call("variableDeclaratorId(LOOKING AHEAD...)");
    if (jj_scan_token(Ident)) { if (!jj_rescan) trace_return("variableDeclaratorId(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("variableDeclaratorId(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("variableDeclarator(LOOKING AHEAD...)");
    if (jj_3R_28()) { if (!jj_rescan) trace_return("variableDeclarator(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("variableDeclarator(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (!jj_rescan) trace_call("arguments(LOOKING AHEAD...)");
    if (jj_scan_token(LPAREN)) { if (!jj_rescan) trace_return("arguments(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) { if (!jj_rescan) trace_return("arguments(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("arguments(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(Ident)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (!jj_rescan) trace_call("fieldDeclaration(LOOKING AHEAD...)");
    if (jj_3R_22()) { if (!jj_rescan) trace_return("fieldDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_23()) { if (!jj_rescan) trace_return("fieldDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(SEMICOLON)) { if (!jj_rescan) trace_return("fieldDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("fieldDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_50() {
    if (!jj_rescan) trace_call("primarySuffix(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_3R_53()) { if (!jj_rescan) trace_return("primarySuffix(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("primarySuffix(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (!jj_rescan) trace_call("primaryExpression(LOOKING AHEAD...)");
    if (jj_3R_47()) { if (!jj_rescan) trace_return("primaryExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("primaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("primitiveType(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) { if (!jj_rescan) trace_return("primitiveType(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("primitiveType(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (!jj_rescan) trace_call("unaryExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_3R_46()) { if (!jj_rescan) trace_return("unaryExpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("type(LOOKING AHEAD...)");
    if (jj_3R_26()) { if (!jj_rescan) trace_return("type(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("type(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_41() {
    if (!jj_rescan) trace_call("multiplicativeExpression(LOOKING AHEAD...)");
    if (jj_3R_43()) { if (!jj_rescan) trace_return("multiplicativeExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("multiplicativeExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_39() {
    if (!jj_rescan) trace_call("additiveExpression(LOOKING AHEAD...)");
    if (jj_3R_41()) { if (!jj_rescan) trace_return("additiveExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("additiveExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("exprStatement(LOOKING AHEAD...)");
    if (jj_3R_25()) { if (!jj_rescan) trace_return("exprStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(SEMICOLON)) { if (!jj_rescan) trace_return("exprStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("exprStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_37() {
    if (!jj_rescan) trace_call("relationalExpression(LOOKING AHEAD...)");
    if (jj_3R_39()) { if (!jj_rescan) trace_return("relationalExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("relationalExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("blockStatementContent(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("blockStatementContent(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_35() {
    if (!jj_rescan) trace_call("equalityExpression(LOOKING AHEAD...)");
    if (jj_3R_37()) { if (!jj_rescan) trace_return("equalityExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("equalityExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_33() {
    if (!jj_rescan) trace_call("conditionalAndExpression(LOOKING AHEAD...)");
    if (jj_3R_35()) { if (!jj_rescan) trace_return("conditionalAndExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("conditionalAndExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("blockStatement(LOOKING AHEAD...)");
    if (jj_scan_token(LBRACE)) { if (!jj_rescan) trace_return("blockStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_24()) { if (!jj_rescan) trace_return("blockStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(RBRACE)) { if (!jj_rescan) trace_return("blockStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("blockStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_31() {
    if (!jj_rescan) trace_call("conditionalOrExpression(LOOKING AHEAD...)");
    if (jj_3R_33()) { if (!jj_rescan) trace_return("conditionalOrExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("conditionalOrExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (!jj_rescan) trace_call("statement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) { if (!jj_rescan) trace_return("statement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("statement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_16() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("expr(LOOKING AHEAD...)");
    if (jj_3R_31()) { if (!jj_rescan) trace_return("expr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("expr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public NawkParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf6880106,0xf6000000,0x76880106,0x76880106,0x200000,0x76000000,0x80,0x200000,0x80106,0x1000000,0x80106,0xf6000000,0x1000000,0x76000000,0x76880106,0x0,0x8000,0x10000,0x4800,0x4800,0x3600,0x3600,0x6,0x6,0x38,0x38,0x106,0x106,0x20000,0x0,0x80106,0x1000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f3,0x0,0x1f3,0x1f3,0x0,0x0,0x0,0x0,0x1f3,0x0,0x1f3,0x0,0x0,0x0,0x1f3,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x1f3,0x0,0x1f3,0x3,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NawkParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NawkParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NawkParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NawkParser(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/* Generated By:JavaCC: Do not edit this line. NawkParser.java */
package interpreter;
import java.io.File;import java.io.FileReader;import java.util.LinkedList;import java.util.List;import interpreter.ast.*;import interpreter.errors.CompilerError;import interpreter.errors.SemanticError;import interpreter.errors.SyntaxError;

public class NawkParser implements NawkParserConstants {

    public static void main(String[] args) {
        try {
          if (args.length == 0) {
            interpreter.NawkParser parser = new NawkParser(NawkParser.class.getResourceAsStream("myawk.nawk"));
            parser.start();
          } else {
            for (String arg: args) {
              File testFile =
                      new File(arg);
              NawkParser parser = new NawkParser(new FileReader(testFile));
              AstRoot root = parser.start();
            }
          }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

/* PARSER RULES */

// Root-Regel
  final public AstRoot start() throws ParseException {
    trace_call("start");
    try {
 AstRoot root;
      root = prog();
      jj_consume_token(0);
                          {if (true) return root;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("start");
    }
  }

  final public AstRoot prog() throws ParseException {
    trace_call("prog");
    try {
    SymbolTable globalSt = new SymbolTable(null);
    List<AstNode> subtrees = new LinkedList<AstNode>();
    AstRoot root;
    AstNode a;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case PPLUS:
        case MINUS:
        case MMINUS:
        case BANG:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case DOUBLE:
        case INTEGER:
        case STRING:
        case BOOLEAN:
        case CHAR:
        case VOID:
        case TRUE:
        case FALSE:
        case PRINT:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(3)) {
          a = statement(globalSt);
                                             subtrees.add(a);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOUBLE:
          case INTEGER:
          case STRING:
          case BOOLEAN:
          case CHAR:
          case VOID:
            a = functionDeclaration();
                                                                                              subtrees.add(a); globalSt.add(((AstFunctionDeclaration)a).identifier.image, (AstVariable) a);
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
        if (subtrees.size() > 0)
            root = new AstRoot(subtrees.get(0).start, subtrees.get(subtrees.size() - 1).end, subtrees, globalSt);
        else
            root = new AstRoot(subtrees, globalSt);

         {if (true) return root;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("prog");
    }
  }

/** STATEMENTS **/
  final public AstStatement statement(SymbolTable st) throws ParseException {
    trace_call("statement");
    try {
    AstStatement stmt;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
        stmt = variableDeclaration(st);
        break;
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_2(3)) {
          stmt = blockStatement(st);
        } else if (jj_2_3(2)) {
          stmt = exprStatement(st);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PRINT:
            stmt = printStatement(st);
            break;
          case SEMICOLON:
            stmt = emptyStatement();
            break;
          case STRING_LITERAL:
            stmt = stringOpStatement();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  final public AstStatement printStatement(SymbolTable st) throws ParseException {
    trace_call("printStatement");
    try {
    AstExpr e;
    Token t1, t2;
      t1 = jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e = arrayAndVariableInitializer(st);
      jj_consume_token(RPAREN);
      t2 = jj_consume_token(SEMICOLON);
        {if (true) return new AstStatementPrint(t1, t2, e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("printStatement");
    }
  }

  final public AstStatement blockStatement(SymbolTable parentSt) throws ParseException {
    trace_call("blockStatement");
    try {
    SymbolTable st = new SymbolTable(parentSt);
    List<AstStatement> list;
    Token t1, t2;
      t1 = jj_consume_token(LBRACE);
      list = blockStatementContent(st);
      t2 = jj_consume_token(RBRACE);
                                                         {if (true) return new AstStatementBlock(t1, t2, list);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("blockStatement");
    }
  }

// Workaround, da (..)* in blockStatement nicht stehen kann, ohne dass
// javecc unreachable code erzeugt
  final public List<AstStatement> blockStatementContent(SymbolTable st) throws ParseException {
    trace_call("blockStatementContent");
    try {
    List<AstStatement> list = new LinkedList<AstStatement>();
    AstStatement a;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case PPLUS:
        case MINUS:
        case MMINUS:
        case BANG:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case DOUBLE:
        case INTEGER:
        case STRING:
        case BOOLEAN:
        case CHAR:
        case TRUE:
        case FALSE:
        case PRINT:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        a = statement(st);
                          list.add(a);
      }
                                              {if (true) return list;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("blockStatementContent");
    }
  }

  final public AstExpr exprStatement(SymbolTable st) throws ParseException {
    trace_call("exprStatement");
    try {
    AstExpr e;
      e = arrayAndVariableInitializer(st);
      jj_consume_token(SEMICOLON);
                                             {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("exprStatement");
    }
  }

  final public AstStatementEmpty emptyStatement() throws ParseException {
    trace_call("emptyStatement");
    try {
      jj_consume_token(SEMICOLON);
         {if (true) return new AstStatementEmpty();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("emptyStatement");
    }
  }

  final public AstStatementStringOp stringOpStatement() throws ParseException {
    trace_call("stringOpStatement");
    try {
    List<AstEasyRegex> list = new LinkedList<AstEasyRegex>();
    AstEasyRegex a = null;
    Token t1, t2;
      t1 = jj_consume_token(STRING_LITERAL);
      jj_consume_token(AT);
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DDOT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        a = stringOpEasyRegexStatement();
                                                                      list.add(a);
      }
      t2 = jj_consume_token(RBRACE);
        {if (true) return new AstStatementStringOp(t1, t2, t1.image, list);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stringOpStatement");
    }
  }

  final public AstEasyRegex stringOpEasyRegexStatement() throws ParseException {
    trace_call("stringOpEasyRegexStatement");
    try {
    SymbolTable st = new SymbolTable(null);
    Token bang = null;
    Token regex;
    AstEasyRegex easyRegex = null;
    AstFunctionBlock block = null;
      jj_consume_token(DDOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        bang = jj_consume_token(BANG);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      regex = jj_consume_token(STRING_LITERAL);
      jj_consume_token(DDOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        block = functionBlock(st);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
        switch (regex.image.substring(1, regex.image.length() - 1)) {
            case "Integer":
                easyRegex = new AstEasyInteger(block);
                break;
            case "Char":
                easyRegex = new AstEasyChar(block);
                break;
            default:
                easyRegex = new AstEasyRegexCustom(regex.image, block);
        }
        if (bang != null)
            easyRegex.isNegation = true;

         {if (true) return easyRegex;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stringOpEasyRegexStatement");
    }
  }

/** FIELD DECLARATION **/
  final public Token type() throws ParseException {
    trace_call("type");
    try {
    Token type;
      type = primitiveType();
                            {if (true) return type;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

  final public Token primitiveType() throws ParseException {
    trace_call("primitiveType");
    try {
    Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primitiveType");
    }
  }

  final public AstVariable variableDeclaration(SymbolTable st) throws ParseException {
    trace_call("variableDeclaration");
    try {
    Token type;
    AstVariable var;
    int dimensions = 0;
      type = type();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                             dimensions++;
      }
      var = variableDeclarator(st);
      jj_consume_token(SEMICOLON);
        var.start = type;
        var.dimensions = dimensions;
        Type t = Type.parseType(type.image);

        // first check if invalid types
        Type typeBase = determineTypeBase(t, var.type);
        if (typeBase == Type.ERROR || t.ordinal() < var.type.ordinal()) {
            String msg = String.format("invalid types between '%s' and '%s'", t, var.type);
            var.type = Type.ERROR;
            var.errors.add(new SemanticError(msg, type, var.end));
            {if (true) return var;}
        }

        // all types can implicitly be assigned to a type whose ordinal value is higher or equal
        var.type = t;

        if (st.find(var.identifier.image) != null)
            var.errors.add(new SemanticError(String.format("Variable '%s' is already declared.%n", var.identifier.image), type, var.end));
        else
            st.add(var.identifier.image, var);

        {if (true) return var;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variableDeclaration");
    }
  }

  final public AstVariable variableDeclarator(SymbolTable st) throws ParseException {
    trace_call("variableDeclarator");
    try {
    AstExpr val = null;
    AstVariable var;
    Token id;
      id = jj_consume_token(Ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        val = arrayAndVariableInitializer(st);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
        // type is at this point not known, therefore set it to null (must be set later)
        var = new AstVariable(null, id, id);
        if (val != null) {
            // run to calc result and to set final type
            var.value = val.run();
            var.type = val.type;
            var.end = val.end;
        }
        {if (true) return var;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variableDeclarator");
    }
  }

/**
* int arr = {1, 2 , 3}; => 1 dim
* int arr = {{1}, {2} , {3, 4}}; 2 dim
* array initializing by allowing to put "normal" expressions and nested arrays
*/
  final public AstExpr arrayAndVariableInitializer(SymbolTable st) throws ParseException {
    trace_call("arrayAndVariableInitializer");
    try {
    // set end token to null because not known
    AstExpr val;
    Token t1, t2;
    AstExpr e1 = null, e2 = null;
    List<AstExpr> elements = new LinkedList<AstExpr>();
    List<CompilerError> errors = new LinkedList<CompilerError>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        t1 = jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case PPLUS:
        case MINUS:
        case MMINUS:
        case BANG:
        case LPAREN:
        case LBRACE:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          e1 = arrayAndVariableInitializer(st);
                                                       elements.add(e1);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            e2 = arrayAndVariableInitializer(st);
        if (e2 != null && e1 instanceof  AstExprArrayInit && !(e2 instanceof  AstExprArrayInit)) {
            errors.add(new SyntaxError(String.format("incompatible array types '%s' and '%s'", e1.getClass().getName(), e2.getClass().getName()), e1.start, e2.end));
        }
        elements.add(e2);
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        t2 = jj_consume_token(RBRACE);
        val = new AstExprArrayInit(t1, t2, Type.VOID, elements);
        if (e1 != null) {
            if (e1 instanceof AstExprArrayInit) // array of arrays
                ((AstExprArrayInit) val).dimensions += ((AstExprArrayInit) e1).dimensions;

            // assign type of literal value
            val.type = e1.run().type;
        }


        // if errors were made, assign them
        val.errors = errors;
        break;
      case PLUS:
      case PPLUS:
      case MINUS:
      case MMINUS:
      case BANG:
      case LPAREN:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LTIERAL:
      case STRING_LITERAL:
      case Ident:
        val = expr(st);
                     {if (true) return val;}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                      {if (true) return val;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("arrayAndVariableInitializer");
    }
  }

/** FUNCTION DECLARATION **/
  final public AstFunctionDeclaration functionDeclaration() throws ParseException {
    trace_call("functionDeclaration");
    try {
    // No Parent table, because a function can not access outer scope
    SymbolTable st = new SymbolTable(null);
    Token t;
    Token i;
    AstFunctionBlock block;
      t = resultType();
      i = jj_consume_token(Ident);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
        functionParameter(st);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          functionParameter(st);
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      block = functionBlock(st);
        {if (true) return new AstFunctionDeclaration(t, block.end, i, st, block);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functionDeclaration");
    }
  }

  final public Token resultType() throws ParseException {
    trace_call("resultType");
    try {
                      Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case DOUBLE:
      case INTEGER:
      case STRING:
      case BOOLEAN:
      case CHAR:
        t = type();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("resultType");
    }
  }

  final public AstVariable functionParameter(SymbolTable st) throws ParseException {
    trace_call("functionParameter");
    try {
    AstVariable a;
    Token type, id;
    int dimensions = 0;
      type = primitiveType();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                      dimensions++;
      }
      id = jj_consume_token(Ident);
        a = new AstVariable(type, id, id);
        a.dimensions = dimensions;
        if (st.find(id.image) == null) {
            st.add(id.image, a);
        } else {
            String msg = String.format("'%s' is already defined in this function", id.image);
            a.errors.add(new SemanticError(msg, type, id));
        }
        {if (true) return a;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functionParameter");
    }
  }

  final public AstFunctionBlock functionBlock(SymbolTable st) throws ParseException {
    trace_call("functionBlock");
    try {
    AstExpr returnValue = null;
    Token t1, t2;
    List<AstStatement> list = new LinkedList<AstStatement>();
    AstStatement a;
      t1 = jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case PPLUS:
        case MINUS:
        case MMINUS:
        case BANG:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case DOUBLE:
        case INTEGER:
        case STRING:
        case BOOLEAN:
        case CHAR:
        case TRUE:
        case FALSE:
        case PRINT:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        a = statement(st);
                                   list.add(a);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        returnValue = expr(st);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      t2 = jj_consume_token(RBRACE);
        AstFunctionBlock afb = new AstFunctionBlock(t1, t2, list, returnValue);
        // give reference to symbol table so that identifiers can be evaluated at runtime. Most needed for the
        // string-operator because the "this" values is evaluated at runtime
        afb.symbolTable = st;

        {if (true) return afb;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functionBlock");
    }
  }

/** EXPRESSIONS **/
  final public AstExpr expr(SymbolTable st) throws ParseException {
    trace_call("expr");
    try {
    AstExpr left, right = null;
    Token op = null;
      // define variable assignment in expression rule, since expr can evaluate to an identifier
          left = conditionalOrExpression(st);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        right = expr(st);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
        if (right != null) {
            {if (true) return new AstAssigment(left.start, right.end, left, right, st);}
        }
        {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

  final public AstExpr conditionalOrExpression(SymbolTable st) throws ParseException {
    trace_call("conditionalOrExpression");
    try {
     AstExpr left, right = null;
     Token op = null;
      left = conditionalAndExpression(st);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        op = jj_consume_token(OR);
        right = conditionalAndExpression(st);
        Type baseType = validateTypesForConditionalOp(left, right, op);
        {if (true) return new AstExprConditionalOr(left, right, op, baseType);}
      }
          {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("conditionalOrExpression");
    }
  }

  final public AstExpr conditionalAndExpression(SymbolTable st) throws ParseException {
    trace_call("conditionalAndExpression");
    try {
     AstExpr left, right = null;
     Token op = null;
      left = equalityExpression(st);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        op = jj_consume_token(AND);
        right = equalityExpression(st);
        Type baseType = validateTypesForConditionalOp(left, right, op);
        {if (true) return new AstExprConditionalAnd(left, right, op, baseType);}
      }
          {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("conditionalAndExpression");
    }
  }

  final public AstExpr equalityExpression(SymbolTable st) throws ParseException {
    trace_call("equalityExpression");
    try {
     AstExpr left, right = null;
     Token op = null;
      left = relationalExpression(st);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          op = jj_consume_token(EQ);
          break;
        case NE:
          op = jj_consume_token(NE);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = relationalExpression(st);
        Type typeBase = validateTypes(left, right, op);
        left = new AstExprEquality(left, right, op, typeBase);
        if (typeBase == Type.ERROR) {
            left.errors.add(new SemanticError(String.format("invalid types for ==/!= '%s' and '%s'", left.type.toString(), right.type.toString()), left.start, right.end));
        }
      }
           {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("equalityExpression");
    }
  }

  final public AstExpr relationalExpression(SymbolTable st) throws ParseException {
    trace_call("relationalExpression");
    try {
     AstExpr left, right = null;
     Token op = null;
      left = additiveExpression(st);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          op = jj_consume_token(LT);
          break;
        case GT:
          op = jj_consume_token(GT);
          break;
        case LE:
          op = jj_consume_token(LE);
          break;
        case GE:
          op = jj_consume_token(GE);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = additiveExpression(st);
        // only allowed between numeric values
        Type typeBase = validateTypes(left, right, op);
        left = new AstExprRelational(left, right, op, typeBase);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
          {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("relationalExpression");
    }
  }

  final public AstExpr additiveExpression(SymbolTable st) throws ParseException {
    trace_call("additiveExpression");
    try {
     AstExpr left, right = null;
     Token op = null;
      left = multiplicativeExpression(st);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = multiplicativeExpression(st);
        Type baseType = validateTypesForAdditiveOp(left, right, op);
        left = new AstExprAdditive(left, right, op, baseType);
      }
          {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("additiveExpression");
    }
  }

/**
* Rules in multiplication:
 OK:       Arithmetic with numeric values (int, double, char)

* Not OK:   Arithmetic with non-numeric values (string, boolean)
*/
  final public AstExpr multiplicativeExpression(SymbolTable st) throws ParseException {
    trace_call("multiplicativeExpression");
    try {
   AstExpr left, right = null;
   Token op = null;
      left = unaryExpression(st);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case MOD:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          op = jj_consume_token(STAR);
          break;
        case SLASH:
          op = jj_consume_token(SLASH);
          break;
        case MOD:
          op = jj_consume_token(MOD);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = unaryExpression(st);
        // only allowed between numeric values
        Type typeBase = validateTypes(left, right, op);
        left = new AstExprMultiplicative(left, right, op, typeBase);
      }
           {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiplicativeExpression");
    }
  }

  final public AstExpr unaryExpression(SymbolTable st) throws ParseException {
    trace_call("unaryExpression");
    try {
   Token op = null;
   AstExpr expr;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case PPLUS:
      case MINUS:
      case MMINUS:
      case BANG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        case PPLUS:
          op = jj_consume_token(PPLUS);
          break;
        case MMINUS:
          op = jj_consume_token(MMINUS);
          break;
        case BANG:
          op = jj_consume_token(BANG);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      expr = primaryExpression(st);
                                                                                           {if (true) return new AstExprUnary(op, expr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unaryExpression");
    }
  }

  final public AstExpr primaryExpression(SymbolTable st) throws ParseException {
    trace_call("primaryExpression");
    try {
    AstExpr lit;
    AstExpr suffix = null;
      lit = literal(st);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
        suffix = primarySuffix(st, lit);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
                                                         {if (true) return new AstExprPrimary(lit, suffix);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primaryExpression");
    }
  }

  final public AstExpr primarySuffix(SymbolTable st, AstExpr identifier) throws ParseException {
    trace_call("primarySuffix");
    try {
    AstExpr e = null, p = null;
    // used when its an function call
    List<AstExpr> params = new LinkedList<AstExpr>();
    List<AstExpr> indices = new LinkedList<AstExpr>();
    Token start, end;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        start = jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case PPLUS:
        case MINUS:
        case MMINUS:
        case BANG:
        case LPAREN:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LTIERAL:
        case STRING_LITERAL:
        case Ident:
          e = expr(st);
                                indices.add(e);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        end = jj_consume_token(RBRACKET);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_14;
          }
          jj_consume_token(LBRACKET);
          e = expr(st);
                                                                                  indices.add(e);
          end = jj_consume_token(RBRACKET);
        }
                                                                                                                   // Array Zugriff
        AstExprArrayCall aac = new AstExprArrayCall(start, end, null, indices);
        if (!(identifier instanceof AstVariable) || !(identifier instanceof AstExprArrayInit)) {
            String msg = String.format("'%s' is not an array", identifier.toString());
            aac.errors.add(new SemanticError(msg, start, end));
        } else {
            String i =  ((AstVariable) identifier).identifier.image;
           if (st.find(i) != null) {
             aac.declaration = (AstExprArrayInit) st.find(i).value;
           } else {
             String msg = String.format("array '%s' is not declared", i);
             aac.errors.add(new SemanticError(msg, start, end));
           }
        }

        {if (true) return aac;}
        break;
      case LPAREN:
        start = jj_consume_token(LPAREN);
        e = arrayAndVariableInitializer(st);
                                                      params.add(e);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          arrayAndVariableInitializer(st);
        }
        end = jj_consume_token(RPAREN);
                                                                                                                          // Function Call
        AstExprFunctionCall asf;
        if (!(identifier instanceof AstLiteralIdent)) {
            asf = new AstExprFunctionCall(start, end, identifier.toString(), null, params);
            String msg = String.format("'%s' is not an function identifier", identifier.toString());
            asf.errors.add(new SemanticError(msg, start, end));
        } else {
            String i =  ((AstLiteralIdent) identifier).identifier.image;
            asf = new AstExprFunctionCall(start, end, i, null, params);

            if (st.find(i) instanceof AstFunctionDeclaration) {
                asf.declaration = (AstFunctionDeclaration) st.find(i);
            } else {
                if (!Helper.isPredefined(i)) {
                    String msg = String.format("function '%s' is not declared or a function", i);
                    asf.errors.add(new SemanticError(msg, start, end));
                }
            }
        }
        {if (true) return asf;}
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primarySuffix");
    }
  }

  final public AstExpr literal(SymbolTable st) throws ParseException {
    trace_call("literal");
    try {
    Token t;
    // User intended type for the variable
    AstExpr literal;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                              literal = new AstLiteralInt(t);
        break;
      case DOUBLE_LITERAL:
        t = jj_consume_token(DOUBLE_LITERAL);
                              literal = new AstLiteralDouble(t);
        break;
      case CHAR_LTIERAL:
        t = jj_consume_token(CHAR_LTIERAL);
                              literal = new AstLiteralChar(t);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                              literal = new AstLiteralString(t);
        break;
      case TRUE:
      case FALSE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                    literal = new AstLiteralBoolean(t);
        break;
      case Ident:
        t = jj_consume_token(Ident);
                    literal = new AstLiteralIdent(t, st);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        literal = expr(st);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                   {if (true) return literal;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("literal");
    }
  }

  AstNode skipError(int kind) throws ParseException {
    trace_call("skipError");
    try {
    ParseException e = generateParseException();
    System.out.println("Hello " + e.toString());
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);
    return null;
    } finally {
      trace_return("skipError");
    }
  }

  boolean isNumeric(Type type) throws ParseException {
    trace_call("isNumeric");
    try {
    return type == Type.INT || type == Type.CHAR || type == Type.DOUBLE;
    } finally {
      trace_return("isNumeric");
    }
  }

  Type determineTypeBase(Type t1, Type t2) throws ParseException {
    trace_call("determineTypeBase");
    try {
     if (t1 == null || t2 == null)
         return Type.ERROR;

    if (t1.ordinal() > Type.STRING.ordinal() || t2.ordinal() > Type.STRING.ordinal()) // error or void
        return Type.ERROR;

    if (t1 == Type.STRING || t2 == Type.STRING) // convert to string
        return Type.STRING;

    if ((t1 == Type.BOOLEAN && t2 != Type.BOOLEAN) || (t2 == Type.BOOLEAN && t1 != Type.BOOLEAN)) // only boolean with boolean
        return Type.ERROR;

    if (t1 == Type.BOOLEAN && t2 == Type.BOOLEAN)
        return Type.BOOLEAN;

    // Otherwise numeric values

    //   OP   # char   # int #  double
    //  # # # # # # # # # # # # # # # #
    // char   # int      int    double
    // int    # int      int    double
    // double ä double  double  double
    if (t1 == Type.DOUBLE || t2 == Type.DOUBLE) return Type.DOUBLE;

    return Type.INT;
    } finally {
      trace_return("determineTypeBase");
    }
  }

  Type validateTypes(AstExpr left, AstExpr right, Token op) throws ParseException {
    trace_call("validateTypes");
    try {
    if (right == null || op == null) // no point in type checking if no right expression exists
        return left.type;

    return determineTypeBase(left.type, right.type);
    } finally {
      trace_return("validateTypes");
    }
  }

  Type validateTypesForConditionalOp(AstExpr left, AstExpr right, Token op) throws ParseException {
    trace_call("validateTypesForConditionalOp");
    try {
    if (right == null || op == null) // no point in type checking if no right expression exists
        return left.type;

    // Only allowed between boolean types
    if (left.type != Type.BOOLEAN || right.type != Type.BOOLEAN) {
        System.out.printf("Bad operator '%s' between types '%s' and '%s'.%n", op.image, left.type, right.type);
        return Type.ERROR;
    }

    return Type.BOOLEAN;
    } finally {
      trace_return("validateTypesForConditionalOp");
    }
  }

  Type validateTypesForAdditiveOp(AstExpr left, AstExpr right, Token op) throws ParseException {
    trace_call("validateTypesForAdditiveOp");
    try {
    if (right == null || op == null) // no point in type checking if no right expression exists
        return left.type;

    if (left.type == Type.ERROR || right.type == Type.ERROR ) {
        System.out.printf("Invalid Types '%s' '%s' %n", left.type, right.type);
        return Type.ERROR;
    }

    if (isNumeric(left.type) && isNumeric(right.type)) { // ok
        return determineTypeBase(left.type, right.type);
    } else if (left.type == Type.STRING || right.type == Type.STRING ) { // Addition with String => Concat
        if (op.image == "+")
            return Type.STRING;
        else {
            System.out.printf("Subtraction between '%s' and '%s' is not allowed%n", left.type, right.type);
            return Type.ERROR;
        }
    } else { // boolean with numerics or boolean with boolean
        System.out.printf("Bad operator '%s' between types '%s' and '%s'.%n", op.image, left.type, right.type);
        System.out.println("Addition/Subtraction between numeric values and boolean or boolean with boolean is not allowed");
        return Type.ERROR;
    }
    } finally {
      trace_return("validateTypesForAdditiveOp");
    }
  }

  public boolean isPredefined(String functionName) throws ParseException {
    trace_call("isPredefined");
    try {
    return functionName.equals("toDouble")
            || functionName.equals("toInt")
            || functionName.equals("toChar")
            || functionName.equals("toBoolean")
            || functionName.equals("isDouble")
            || functionName.equals("isInt")
            || functionName.equals("isChar")
            || functionName.equals("isBoolean")
            || functionName.equals("print");
    } finally {
      trace_return("isPredefined");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_36() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(Ident)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(CHAR_LTIERAL)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(Ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_34()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public NawkParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf450083c,0xf0000000,0xf0000000,0x4000000,0xf450083c,0x0,0x800,0x400000,0xf0000000,0x1000000,0x400,0x8000000,0x50083c,0x50083c,0x8000000,0xf0000000,0xf0000000,0x1000000,0xf450083c,0x0,0x400,0x40000,0x80000,0x24000,0x24000,0x1b000,0x1b000,0x14,0x14,0x1c0,0x1c0,0x83c,0x83c,0x1100000,0x10083c,0x1000000,0x8000000,0x1100000,0x0,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f8f,0x3,0x1,0x880,0x1f8d,0x40,0x0,0x0,0x1,0x0,0x0,0x0,0x1f0c,0x1f0c,0x0,0x1,0x3,0x0,0x1f8d,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f0c,0x0,0x0,0x0,0xc,0x1f0c,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NawkParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NawkParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NawkParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NawkParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NawkParser(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NawkParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

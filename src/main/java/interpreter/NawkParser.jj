options {
    STATIC = false;
    DEBUG_PARSER = true;
//    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(NawkParser)
package interpreter;
import java.io.File;import java.io.FileReader;import java.util.HashSet;import java.util.Set;import java.util.LinkedList;import java.util.List;import interpreter.ast.*;import interpreter.errors.*;

public class NawkParser {
    public List<CompilerError> globalErrors = new LinkedList<CompilerError>();
    public static void main(String[] args) {
        try {
          if (args.length == 0) {
            System.out.println("Running with default file ...");
            interpreter.NawkParser parser = new NawkParser(NawkParser.class.getClassLoader().getResourceAsStream("testfile_.nawk"));
              AstRoot root = parser.start();
              root.checkSemantic(parser.globalErrors);
              if (parser.globalErrors.size() > 0)
                  System.out.println("Can not run program. Check out errors.");
              else
                  root.run();
          } else {
              System.out.println("Running with arguments...");
            for (String arg: args) {
                File testFile = new File(arg);
                System.out.println("Reading in öpöpöFile....");
                NawkParser parser = new NawkParser(new FileReader(testFile));
                AstRoot root = parser.start();
                LinkedList<CompilerError> errors = new LinkedList<CompilerError>();

                root.checkSemantic(errors);
                if (errors.size() > 0) {
                    System.out.println("Can not run program. Check out errors.");
                    for (CompilerError err : parser.globalErrors){
                        System.out.println(err.toString());
                    }
                }
                else
                    root.run();
            }
          }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}

PARSER_END(NawkParser)

/* LEXER RULES  */

TOKEN : {
    // OPERATORS
     <AT : "@">
    | <PLUS :"+">
    | <PPLUS :"++">
    | <MINUS: "-">
    | <MMINUS: "--">
    | <STAR: "*">
    | <SLASH: "/">
    | <MOD: "%">
    | <EXP: "^">
    | <ASSIGN: "=">
    | <BANG: "!">
    | <GT: ">">
    | <LT: "<">
    | <EQ: "==">
    | <LE: "<=">
    | <GE: ">=">
    | <NE: "!=">
    | <OR: "||">
    | <AND: "&&">
    // SEPERATORS
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <LBRACKET: "[">
    | <RBRACKET: "]">
    | <SEMICOLON: ";">
    | <COMMA: ",">
    // TYPES
    | <DOUBLE: "double">
    | <INTEGER: "int">
    | <STRING: "string">
    | <BOOLEAN: "boolean">
    | <CHAR: "char">
    // OTHER
    | <VOID: "void">
    | <TRUE: "true">
    | <FALSE: "false">
    | <RETURN: "return">
    | <DOT: ".">
    | <DDOT: ":">
    | <PRINT: "print">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    // LITERALS (Values)
    | <INTEGER_LITERAL : "0" | ["1" - "9"] (["0" - "9"])*>
    | <DOUBLE_LITERAL : <INTEGER_LITERAL> "." (["0" - "9"])*>
    | <CHAR_LTIERAL : "'" (["a"-"z", "A"-"Z"]){1} "'">
    | <STRING_LITERAL : "\"" (~["\""])* "\""> // innerhalb Gänsefüßchen alles bis auf weitere Gänsefüßen matchen
    | <Ident : ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

// Ignore in syntax, lexer analysis
SKIP : {
    " "
    | "\t"
    | <anything: ~[]> // anything else that the Lexer does not know
}

/* PARSER RULES */

// Root-Regel
AstRoot start() : {
    AstRoot root;
    Set<Integer> syncChars = new HashSet<Integer>();
    syncChars.add(NawkParserConstants.EOF);
}{
    root = prog(syncChars) <EOF> { return root; }
}

AstRoot prog(Set<Integer> syncChars) : {
    SymbolTable globalSt = new SymbolTable(null);
    List<AstNode> subtrees = new LinkedList<AstNode>();
    AstRoot root;
    AstNode a;
} {
    // Needs Lookahead so that a variableDeclaration and functionDeclaration can be differentiated
    ( LOOKAHEAD(5) a = functionDeclaration() { subtrees.add(a); globalSt.add(((AstFunctionDeclaration)a).identifier.image, (AstVariable) a); } | a = statement(globalSt) { subtrees.add(a); } )* {
        if (subtrees.size() > 0)
            root = new AstRoot(subtrees.get(0).start, subtrees.get(subtrees.size() - 1).end, subtrees, globalSt);
        else
            root = new AstRoot(subtrees, globalSt);

         return root;
     }
}

/** STATEMENTS **/

AstStatement statement(SymbolTable st) : {
    AstStatement stmt;
} {
    (
    // LOOKAHEAD so  that a blockStatement and an array definition can be differentiated
    LOOKAHEAD(10) stmt = blockStatement(st)
    | stmt = variableDeclaration(st)
    // Lookahead 2 so that a exprStatement (=>String literal) and stringOpStatement can be differentiated
    | LOOKAHEAD(2) stmt = exprStatement(st)
    | stmt = printStatement(st)
    | stmt = whileStatement(st)
    | stmt = ifStatement(st)) {
        return stmt;
    }
}

AstStatement printStatement(SymbolTable st) : {
    AstExpr e = null;
    Token t1 = null, t2 = null, t3 = null, t4 = null;
    Set<Integer> syncChars = new HashSet<Integer>();
    syncChars.add(NawkParserConstants.RBRACE);
    syncChars.add(NawkParserConstants.SEMICOLON);
} {
try {
    t1 = <PRINT> t2 = "(" (e = arrayAndVariableInitializer(st) | missingExpression(t2)) t3 = ")" (t4 = ";" | missingSemicolon(t3)) {
        return new AstStatementPrint(t1, t4, e);
    }
} catch (ParseException ex) {
    skipUntil(syncChars);
    globalErrors.add(new SyntaxError(ex.getMessage(), t1, t4));
    return new AstStatementNone();
}
}

AstStatement blockStatement(SymbolTable parentSt) : {
    SymbolTable st = new SymbolTable(parentSt);
    List<AstStatement> list = new LinkedList<AstStatement>();
    Token t1, t2;
    AstStatement a;
} {
    t1 = "{" ( a = statement(st) { list.add(a); } )* t2 = "}" { return new AstStatementBlock(t1, t2, list); }
}


AstExpr exprStatement(SymbolTable st) : {
    AstExpr e;
} {
    e = arrayAndVariableInitializer(st) ";" {return e;}
}

AstExprStringOp stringOpExpr() : {
    List<AstEasyRegex> list = new LinkedList<AstEasyRegex>();
    AstEasyRegex a = null;
    Token t1, t2;
} {
    t1 = <STRING_LITERAL><AT>"{" ( a = stringOpEasyRegexExpr() { list.add(a); } )* t2 = "}" {
    return new AstExprStringOp(t1, t2, t1.image, list);
}
}

AstStatementWhile whileStatement(SymbolTable st) : {
   AstExpr expr;
   AstStatement stm;
   Token start;
} {
  start = "while" "(" expr = conditionalOrExpression(st) ")" stm = blockStatement(st) { return new AstStatementWhile(start, expr, stm, st); }
}

AstStatementIf ifStatement(SymbolTable st) : {
    Token start;
    AstExpr expr;
   AstStatement option1, option2 = null;
} {
    start = "if" "(" expr = conditionalOrExpression(st) ")" option1 = blockStatement(st) ["else" option2 = blockStatement(st) ]
    {
        return new AstStatementIf(start, expr, option1, option2);
    }
}

AstEasyRegex stringOpEasyRegexExpr() : {
    SymbolTable st = new SymbolTable(null);
    Token bang = null;
    Token regex;
    AstEasyRegex easyRegex = null;
    AstFunctionBlock block = null;
} {
    <DDOT> [bang = <BANG> ] regex = <STRING_LITERAL> <DDOT> [block = functionBlock(st)] {
        switch (regex.image.substring(1, regex.image.length() - 1)) {
            case "Integer":
                easyRegex = new AstEasyInteger(block);
                break;
            case "Char":
                easyRegex = new AstEasyChar(block);
                break;
            default:
                easyRegex = new AstEasyRegexCustom(regex.image, block);
        }
        if (bang != null)
            easyRegex.isNegation = true;

         return easyRegex;
    }
}

/** FIELD DECLARATION **/

Token type() :
{
    Token type;
} {
    type = primitiveType() {return type;}
}

Token primitiveType() : {
    Token t;
} {
   (t = "boolean"
   | t = "char"
   | t = "int"
   | t = "double"
   | t = "string") {return t;}
}

AstStatementVariableDeclaration variableDeclaration(SymbolTable st) : {
    Token type, end = null;
    AstExpr val = null;
    int dimensions = 0;
    Token id;
    Set<Integer> syncChars = new HashSet<Integer>();
    syncChars.add(NawkParserConstants.RETURN);
} {
try {
    type = type() ("[" "]" { dimensions++; })* id = <Ident> [ "=" val = arrayAndVariableInitializer(st)] (end = ";" | missingSemicolon(type)) {
        return new AstStatementVariableDeclaration(type, end, type, id, val, dimensions, st);
    }
} catch (ParseException e) {
    skipUntil(syncChars);
    return new AstStatementVariableDeclaration(null, null, null, null, val, dimensions, st);
}
}

/**
* int arr = {1, 2 , 3}; => 1 dim
* int arr = {{1}, {2} , {3, 4}}; 2 dim
* array initializing by allowing to put "normal" expressions and nested arrays
*/
AstExpr arrayAndVariableInitializer(SymbolTable st) : {
    // set end token to null because not known
    AstExpr val;
    Token t1, t2, t3;
    AstExpr e1 = null, e2 = null;
    List<AstExpr> elements = new LinkedList<AstExpr>();
    Set<Integer> syncChars = new HashSet<Integer>();
    syncChars.add(NawkParserConstants.RBRACE);
} {
try {

    // single & multi dim
    (t1 = "{" e1 = arrayAndVariableInitializer(st) { elements.add(e1); } (t3 = "," e2 = arrayAndVariableInitializer(st) {
        elements.add(e2);
    } )* t2 = "}" {
        val = new AstExprArrayInit(t1, t2, Type.VOID, elements, new SymbolTable(st));
        if (e1 != null) {
            if (e1 instanceof AstExprArrayInit) // array of arrays
                ((AstExprArrayInit) val).dimensions += ((AstExprArrayInit) e1).dimensions;
        }
    }
    // zero dim, normal variable
    |
    LOOKAHEAD(3)
    val = stringOpExpr()
    |
    val = expr(st)) { return val; }

} catch (ParseException ex) {
    skipUntil(syncChars);
    System.out.println(ex.getMessage());
    return new ValueInteger(0);
}
}

/** FUNCTION DECLARATION **/

AstFunctionDeclaration functionDeclaration() : {
    // No Parent table, because a function can not access outer scope
    SymbolTable st = new SymbolTable(null);
    Token t;
    Token i;
    AstFunctionBlock block;
    AstVariable a;
    List<AstVariable> params = new LinkedList<AstVariable>();
} {
    t = resultType() i = <Ident> "(" [ a = functionParameter(st) { params.add(a); } ( "," a = functionParameter(st) { params.add(a); })* ] ")" block = functionBlock(st) {
        return new AstFunctionDeclaration(t, block.end, i, st, block, params);
    }
}

Token resultType() : {Token t;} {
    (t = "void" | t = type()) { return t; }
}

AstVariable functionParameter(SymbolTable st) : {
    AstVariable a;
    Token type, id;
    int dimensions = 0;
} {
    type = primitiveType() ("[" "]" { dimensions++; })* id = <Ident>  {
        a = new AstVariable(type, id, id);
        a.dimensions = dimensions;
        a.symbolTable = st;
        return a;
    }
}

AstFunctionBlock functionBlock(SymbolTable st) : {
    AstExpr returnValue = null;
    Token t1, t2;
    List<AstStatement> list = new LinkedList<AstStatement>();
    AstStatement a;
 } {
    t1 = "{" ( a = statement(st) { list.add(a); } )* ["return" returnValue = expr(st) ";"]  t2 = "}" {
        AstFunctionBlock afb = new AstFunctionBlock(t1, t2, list, returnValue);
        // give reference to symbol table so that identifiers can be evaluated at runtime. Most needed for the
        // string-operator and special array expressions because the "this" values is evaluated at runtime
        afb.symbolTable = st;

        return afb;
    }
}

/** EXPRESSIONS **/

AstExpr expr(SymbolTable st): {
    AstExpr left, right = null;
    Token op = null;
    Token id;
    AstExpr val;
 } {
    ( LOOKAHEAD(3) id = <Ident> "=" val = arrayAndVariableInitializer(st) { left = new AstAssigment(id, id, id, val, st); } | left = conditionalOrExpression(st)) {
        left.end = left.start;
        return left;
    }
}

AstExpr conditionalOrExpression(SymbolTable st) : {
     AstExpr left, right = null;
     Token op = null;
 } {
    left = conditionalAndExpression(st) ( op = "||" right = conditionalAndExpression(st) {
        AstExpr a =  new AstExprConditionalOr(left, right, op);
        a.symbolTable = st;
    })* { return left; }
}

AstExpr conditionalAndExpression(SymbolTable st) : {
     AstExpr left, right = null;
     Token op = null;
 } {
    left = equalityExpression(st) (op = "&&" right = equalityExpression(st) {
        AstExpr a = new AstExprConditionalAnd(left, right, op);
        // left and right already have a symbol table. Got in equality expression
        a.symbolTable = st;
    })* { return left; }
}

AstExpr equalityExpression(SymbolTable st) : {
     AstExpr left, right = null;
     Token op = null;
 } {
    left = relationalExpression(st) ( ( op = "==" | op = "!=" ) right = relationalExpression(st) {
        left = new AstExprEquality(left, right, op);
        left.symbolTable = st;
        right.symbolTable = st;
    } )* { return left; }
}

AstExpr relationalExpression(SymbolTable st) : {
     AstExpr left, right = null;
     Token op = null;
 } {
    left = additiveExpression(st) [ ( op = "<" | op = ">" | op = "<=" | op = ">=" ) right = additiveExpression(st)  {
        // only allowed between numeric values
        Type typeBase = Helper.validateTypes(left, right, op);
        left = new AstExprRelational(left, right, op);
        left.symbolTable = st;
        right.symbolTable = st;
    } ] { return left; }
}

AstExpr additiveExpression(SymbolTable st) : {
     AstExpr left, right = null;
     Token op = null;
 } {
    left = multiplicativeExpression(st) ( ( op = "+" | op = "-" ) right = multiplicativeExpression(st) {
        Type baseType = Helper.validateTypesForAdditiveOp(left, right, op);
        left = new AstExprAdditive(left, right, op, baseType);
        left.symbolTable = st;
        right.symbolTable = st;
    })* { return left; }
}

/**
* Rules in multiplication:
 OK:       Arithmetic with numeric values (int, double, char)

* Not OK:   Arithmetic with non-numeric values (string, boolean)
*/
AstExpr multiplicativeExpression(SymbolTable st) : {
   AstExpr left, right = null;
   Token op = null;
} {
    left = unaryExpression(st) ( ( op = "*" | op = "/" | op = "%" ) right = unaryExpression(st) {
        // only allowed between numeric values
        Type typeBase = Helper.validateTypes(left, right, op);
        left = new AstExprMultiplicative(left, right, op, typeBase);
        left.symbolTable = st;
        right.symbolTable = st;
    } )* { return left; }
}

AstExpr unaryExpression(SymbolTable st) : {
   Token op = null;
   AstExpr expr, a;
} {
    [op = "+" | op = "-" | op = "++" | op = "--" | op = "!"] expr = primaryExpression(st) {a =  new AstExprUnary(op, expr); a.symbolTable = st; return a;}
}

AstExpr primaryExpression(SymbolTable st) : {
    AstExpr lit;
    AstExpr suffix = null;
    AstExpr a;
 } {
    lit = literal(st) [suffix = primarySuffix(st, lit)] {a = new AstExprPrimary(lit, suffix); a.symbolTable = st; return a;}
}

AstExpr primarySuffix(SymbolTable st, AstExpr identifier) : {
    AstExpr e = null, p = null;
    // used when its an function call
    List<AstExpr> params = new LinkedList<AstExpr>();
    List<AstExpr> indices = new LinkedList<AstExpr>();
    Token start, end;
 } {
    start = "[" [e = expr(st) { indices.add(e); }]  end = "]" ("[" e = expr(st) { indices.add(e); } end = "]")* {  // Array access
        // declaration is set after semantic analysis
        return new AstExprArrayCall(start, end, null, indices, identifier, st);
    }
    |
    start = "("[ e = arrayAndVariableInitializer(st) { params.add(e); } ("," e = arrayAndVariableInitializer(st) { params.add(e); } )* ] end = ")" { // Function Call
        return new AstExprFunctionCall(start, end, identifier, null, params, st);
    }
}

AstExpr literal(SymbolTable st) : {
    Token t;
    // User intended type for the variable
    AstExpr literal;
} {
    ( t = <INTEGER_LITERAL> { literal = new AstLiteralInt(t);}
    | t = <DOUBLE_LITERAL>  { literal = new AstLiteralDouble(t);}
    | t = <CHAR_LTIERAL>    { literal = new AstLiteralChar(t);}
    | t = <STRING_LITERAL>  { literal = new AstLiteralString(t);}
    | (t = <TRUE> | t = <FALSE>)  { literal = new AstLiteralBoolean(t);}
    | t = <Ident> { literal = new AstLiteralIdent(t, st); }
    | "(" literal = expr(st)")") { literal.symbolTable = st; return literal;  } // return type when one rule in the "()" is succefully applied
}

JAVACODE
void skipUntil(Set<Integer> kindSet) {
//    ParseException e = generateParseException();
//    System.out.println(e.toString());
    Token t;
    do {
        t = getNextToken();
    } while (!kindSet.contains(t.kind));
}

JAVACODE
void missingSemicolon(Token t) {
    String msg = String.format("missing ';' after '%s'.", t.image);
    System.out.println(msg);
    globalErrors.add(new SyntaxError(msg, t, t));
}

JAVACODE
void missingSemicolonString(String t, Token start) {
    String msg = String.format("missing ';' after '%s'.", t);
    System.out.println(msg);
    globalErrors.add(new SyntaxError(msg, start, start));
}

JAVACODE
void missingExpression(Token t) {
//    ParseException e = generateParseException();
    String msg = String.format("missing an expression near '%s'.", t.image);
    System.out.println(msg);
    globalErrors.add(new SyntaxError(msg, t, t));
}

JAVACODE
void missingDeclarator(Token t) {
//    ParseException e = generateParseException();
    String msg = String.format("missing an declarator after '%s'.", t.image);
    System.out.println(msg);
    globalErrors.add(new SyntaxError(msg, t, t));
}

JAVACODE
void missingArrayComma(Token t) {
    ParseException e = generateParseException();
    String msg = String.format("missing an ',' near '%s'.", t.image);
    System.out.println(msg);
    globalErrors.add(new SyntaxError(msg, t, t));
    throw e;
}